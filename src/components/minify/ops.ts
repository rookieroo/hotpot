export const cssominifyOptions = [
  {
    id: 'sourceMap',
    type: 'checkbox',
    label: 'Source Map',
    helpText: 'Generate a source map when true.'
  },
  {
    id: 'debug',
    type: 'checkbox',
    label: 'Debug',
    helpText: 'Output debug information to stderr.'
  },
  {
    id: 'restructure',
    type: 'checkbox',
    label: 'Restructure',
    helpText: 'Disable or enable a structure optimisations.',
    checked: true
  },
  {
    id: 'forceMediaMerge',
    type: 'checkbox',
    label: 'Force Media Merge',
    helpText: 'Enables merging of @media rules with the same media query by splitted by other rules. The optimisation is unsafe in general, but should work fine in most cases. Use it on your own risk.',
    unsafe: true,
  },
  {
    id: 'clone',
    type: 'checkbox',
    label: 'Clone',
    helpText: 'Transform a copy of input AST if true. Useful in case of AST reuse.',
  },
  {
    id: 'comments',
    type: 'radio',
    label: 'Comments',
    helpText: `Specify what comments to leave:'exclamation' or true – leave all exclamation comments (i.e. /*! .. */)'first-exclamation' – remove every comment except first one false – remove all comments`,
    options: ['true', 'false', 'exclamation', 'first-exclamation']
  },
]

export const htmlMinifyOptions = [
  {
    id: 'caseSensitive',
    type: 'checkbox',
    label: 'Case-sensitive',
    helpText: 'Treat attributes in case sensitive manner (useful for custom HTML tags)'
  },
  {
    id: 'collapseBooleanAttributes',
    type: 'checkbox',
    label: 'Collapse boolean attributes',
    helpText: 'Omit attribute values from boolean attributes',
    checked: true
  },
  {
    id: 'collapseInlineTagWhitespace',
    type: 'checkbox',
    label: 'Collapse inline tag whitespace',
    helpText: 'Don\'t leave any spaces between display:inline; elements when collapsing.Must be used in conjunction with collapseWhitespace=true',
    unsafe: true
  },
  {
    id: 'collapseWhitespace',
    type: 'checkbox',
    label: 'Collapse whitespace',
    helpText: 'Collapse white space that contributes to text nodes in a document tree',
    checked: true
  },
  {
    id: 'conservativeCollapse',
    type: 'checkbox',
    label: 'Conservative collapse',
    helpText: `Always collapse to 1 space (never remove it entirely).
    Must be used in conjunction with <code>collapseWhitespace=true</code>`
  },
  {
    id: 'decodeEntities',
    type: 'checkbox',
    label: 'Decode Entity Characters',
    helpText: 'Use direct Unicode characters whenever possible',
    checked: true
  },
  {
    id: 'html5',
    type: 'checkbox',
    label: 'HTML5',
    helpText: 'Parse input according to HTML5 specifications',
    checked: true
  },
  {
    id: 'includeAutoGeneratedTags',
    type: 'checkbox',
    label: 'Include auto-generated tags',
    helpText: 'Insert tags generated by HTML parser'
  },
  {
    id: 'keepClosingSlash',
    type: 'checkbox',
    label: 'Keep closing slash',
    helpText: 'Keep the trailing slash on singleton elements'
  },
  {
    id: 'maxLineLength',
    type: 'number',
    label: 'Max. line length',
    helpText: 'Specify a maximum line length. Compressed output will be split by newlines at valid HTML split-points'
  },
  {
    id: 'minifyCSS',
    type: 'checkbox',
    label: 'Minify CSS',
    helpText: 'Minify CSS in style elements and style attributes (uses <code>clean-css</code>)',
    checked: true
  },
  {
    id: 'minifyJS',
    type: 'checkbox',
    label: 'Minify JavaScript',
    helpText: 'Minify JavaScript in script elements and event attributes (uses <code>Terser</code>)',
    checked: true
  },
  {
    id: 'minifyURLs',
    type: 'checkbox',
    label: 'Minify URLs',
    helpText: 'Minify URLs in various attributes (uses <code>relateurl</code>)'
  },
  {
    id: 'noNewlinesBeforeTagClose',
    type: 'checkbox',
    label: 'No newline before Tag Close',
    helpText: 'Never add a newline before a tag that closes an element'
  },
  {
    id: 'preserveLineBreaks',
    type: 'checkbox',
    label: 'Preserve line-breaks',
    helpText: `Always collapse to 1 line break (never remove it entirely) when whitespace between tags include a line break.
    Must be used in conjunction with <code>collapseWhitespace=true</code>`
  },
  {
    id: 'preventAttributesEscaping',
    type: 'checkbox',
    label: 'Prevent attributes escaping',
    helpText: 'Prevents the escaping of the values of attributes',
    unsafe: true
  },
  {
    id: 'processConditionalComments',
    type: 'checkbox',
    label: 'Process conditional comments',
    helpText: 'Process contents of conditional comments through minifier',
    checked: true
  },
  {
    id: 'processScripts',
    type: 'text',
    label: 'Process scripts',
    helpText: 'Comma-delimited string corresponding to types of script elements to process through minifier (e.g. <code>text/ng-template, text/x-handlebars-template</code>)',
    value: 'text/html'
  },
  {
    id: 'quoteCharacter',
    type: 'text',
    label: 'Quote character',
    helpText: 'Type of quote to use for attribute values (<code>\'</code> or <code>"</code>)'
  },
  {
    id: 'removeAttributeQuotes',
    type: 'checkbox',
    label: 'Remove attribute quotes',
    helpText: 'Remove quotes around attributes when possible',
    checked: true
  },
  {
    id: 'removeComments',
    type: 'checkbox',
    label: 'Remove comments',
    helpText: 'Strip HTML comments',
    checked: true
  },
  {
    id: 'removeEmptyAttributes',
    type: 'checkbox',
    label: 'Remove empty attributes',
    helpText: 'Remove all attributes with whitespace-only values',
    checked: true
  },
  {
    id: 'removeEmptyElements',
    type: 'checkbox',
    label: 'Remove empty elements',
    helpText: 'Remove all elements with empty contents',
    unsafe: true
  },
  {
    id: 'removeOptionalTags',
    type: 'checkbox',
    label: 'Remove optional tags',
    checked: true
  },
  {
    id: 'removeRedundantAttributes',
    type: 'checkbox',
    label: 'Remove redundant attributes',
    helpText: 'Remove attributes when value matches default.',
    checked: true
  },
  {
    id: 'removeScriptTypeAttributes',
    type: 'checkbox',
    label: 'Remove script type attributes',
    helpText: `Remove <code>type="text/javascript"</code> from <code>script</code> tags.
    Other <code>type</code> attribute values are left intact`,
    checked: true
  },
  {
    id: 'removeStyleLinkTypeAttributes',
    type: 'checkbox',
    label: 'Remove style link type attributes',
    helpText: `Remove <code>type="text/css"</code> from <code>style</code> and <code>link</code> tags.
    Other <code>type</code> attribute values are left intact`,
    checked: true
  },
  {
    id: 'removeTagWhitespace',
    type: 'checkbox',
    label: 'Remove tag whitespace',
    helpText: `Remove space between attributes whenever possible.
    <em>Note that this will result in invalid HTML!</em>`,
    checked: true,
    unsafe: true
  },
  {
    id: 'sortAttributes',
    type: 'checkbox',
    label: 'Sort attributes',
    helpText: 'Sort attributes by frequency',
    checked: true,
    unsafe: true
  },
  {
    id: 'sortClassName',
    type: 'checkbox',
    label: 'Sort class name',
    helpText: 'Sort style classes by frequency',
    checked: true,
    unsafe: true
  },
  {
    id: 'trimCustomFragments',
    type: 'checkbox',
    label: 'Trim white space around custom fragments',
    helpText: 'Trim white space around <code>ignoreCustomFragments</code>.',
    checked: true
  },
  {
    id: 'useShortDoctype',
    type: 'checkbox',
    label: 'Use short doctype',
    helpText: 'Replaces the <code>doctype</code> with the short (HTML5) <code>doctype</code>',
    checked: true
  }
];

export const terserMinifyOptions = [
  {
    id: 'ecma',
    type: 'radio',
    label: 'ecma',
    helpText: 'Generate a source map when true.',
    options: ['5', '2015', '2016']
  },
  {
    id: 'enclose',
    type: 'checkbox',
    label: 'enclose',
    helpText: 'pass true, or a string in the format of "args[:values]", where args and values are comma-separated argument names and values, respectively, to embed the output in a big function with the configurable arguments and values.'
  },
  {
    id: 'mangle',
    type: 'text',
    label: 'mangle',
    helpText: 'pass false to skip mangling names, or pass an object to specify mangle options',
  },
  {
    id: 'keep_classnames',
    type: 'checkbox',
    label: 'keep_classnames',
    helpText: 'pass true to prevent discarding or mangling of class names. Pass a regular expression to only keep class names matching that regex.',
  },
  {
    id: 'keep_fnames',
    type: 'checkbox',
    label: 'keep_fnames',
    helpText: 'pass true to prevent discarding or mangling of function names. Pass a regular expression to only keep function names matching that regex. Useful for code relying on Function.prototype.name. If the top level minify option keep_classnames is undefined it will be overridden with the value of the top level minify option keep_fnames.',
  },
  {
    id: 'ie8',
    type: 'checkbox',
    label: 'ie8',
    helpText: `set to true to support IE8.`,
  },
  {
    id: 'module',
    type: 'checkbox',
    label: 'module',
    helpText: 'Use when minifying an ES6 module. "use strict" is implied and names can be mangled on the top scope. If compress or mangle is enabled then the toplevel option will be enabled.',
  },
  {
    id: 'safari10',
    type: 'checkbox',
    label: 'safari10',
    helpText: `pass true to work around Safari 10/11 bugs in loop scoping and await. See safari10 options in mangle and format for details.`,
  },
  {
    id: 'toplevel',
    type: 'checkbox',
    label: 'toplevel',
    helpText: `set to true if you wish to enable top level variable and function name mangling and to drop unused variables and functions.`,
    options: ['true', 'false', 'exclamation', 'first-exclamation']
  },
  {
    id: 'sourceMap',
    type: 'text',
    label: 'sourceMap',
    helpText: `pass an object if you wish to specify source map options.`,
  },
  {
    id: 'compress',
    type: 'text',
    label: 'compress',
    helpText: `pass false to skip compressing entirely. Pass an object to specify custom compress options.`,
  },
  {
    id: 'parse',
    type: 'text',
    label: 'parse',
    helpText: `pass an object if you wish to specify some additional parse options.`,
  },
  {
    id: 'format',
    type: 'text',
    label: 'format',
    helpText: `pass an object if you wish to specify additional format options. The defaults are optimized for best compression.`,
  },
  {
    id: 'nameCache',
    type: 'text',
    label: 'nameCache',
    value: null,
    helpText: `pass an empty object {} or a previously used nameCache object if you wish to cache mangled variable and property names across multiple invocations of minify(). Note: this is a read/write property. minify() will read the name cache state of this object and update it during minification so that it may be reused or externally persisted by the user.`,
  },
]

export const Options = {
  HTML: htmlMinifyOptions,
  CSS: cssominifyOptions,
  JS: terserMinifyOptions,
}

export interface IMinifyOptions {
  id: string;
  type: string;
  label: string;
  helpText: string;
  unsafe: boolean;
  options: string|boolean[];
}